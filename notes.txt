
**  Everything in Python is Object **
**  Every object contains methods ****

number
-----
number can be integer or decimal or octal or hexa

aval = 12
bval = 34.32


string
-------
string is defined in single or double or triple quotes


aname = 'python programming'
bname = "python programming"
cname = """python programming"""
dname = '''python programming'''


list  ( array in C )
------
list contains set of elements.
elements can be set of numbers or strings or any combination.
list elements are defined in [].


alist = [10,"python",34.43]
blist = [[10,20],[40,50],[43,32] ]  # list of lists


tuple   ( immutable , unchangable )
----------
tuple contains set of elements.
elements can be set of numbers or strings or any combination.
tuple elements are defined in ().
*******  Elements inside tuple cant be modified DIRECTLY ****

atup = (43,3,"unix","java")



dictionary  ( hash map in java ,  hash in perl .. )   (  json files )
-----------
dictionary contains elements in the form of keys and values.
dictionary elements are defined in {}.
keys can be either integer or string which is used to uniquely identify the value.
value can be number or string or list or tuple or dictionary or any complex data structure too.


syntax:   object =  { key:value , key:value }
example:   book  =  {"chap1":10 , "chap2":20 }
            info = {1:2,3:4}
            data = {"chap1":[10,"Rita"] , "chap2":[20,"Rao"] }   # dictionary of lists









classification of objects
------------------------------


mutable objects ( changable , editable ) : list dictionary , set 


immutable objects ( unchangable )        : number , string , tuple



commenting in python
----------------------


single line comment
-------------------
# this is the single line comment


multi line comment


'''
this is
multi line
comment
'''



documentation
----------------

- offline help
- online help














how to display all the builtin functions ?

In the console.. type the below

dir(__builtins__)


builtin functions
------------------------

print()
range()
len()
type()
isinstance()
help()
dir()
input()
sum()
max()
min()
chr()
ord()
exit()



type casting functions - converting from one object to another another

str()
int()
float()
oct()
hex()
list()
tuple()
dict()
set()







operators
-------------


arithmetic operators :  + - * %  /
---------------------

assignment operators   ( ++ and -- are allowed in python)
--------------------
val = 10


=  +=  -= *=


val = 10
val = val + 1     or val +=1
val = val - 1    or   val-=1


relational operators
--------------------
< <= > >= == !=


logical operators
-----------------
and
or 
not




name = "python"
if len(name) == 6   and  name.isupper() :
    # do something


name = "python"
if len(name) == 6   or  name.isupper() :
    # do something


special operators
-------------------
in
as
+
*

alist = [10,20,30]

if 10 in alist:
    print('something')

book = {"chap1":10 ,"chap2":20}

if "chap1" in book:
    print('do something')



alist = [10,20,30]
for val in alist:
    print(val)


alist = [10,20,30]
alist * 4
[10, 20, 30, 10, 20, 30, 10, 20, 30, 10, 20, 30]
output = alist * 4
output
[10, 20, 30, 10, 20, 30, 10, 20, 30, 10, 20, 30]

name = "python"
name * 5
'pythonpythonpythonpythonpython'











file handling
----------------

- working with flat files (   .csv  .log .conf  .txt .prop  .... )


- working with third party files (  .docx  .pptx .pdf .xlsx .rar .7z .... )




- working with flat files (   .csv  .log .conf  .txt .prop  .... )
------------------------------------------------------------------



opening the file
-----------------

syntax:    object  = open(filename,mode)
example:      fobj = open("customers.txt","r")  # reading the file
              fobj = open("customers.txt","w")  # writing to the file
              case1 : If file is already existing ... it overwrites the existing content first
              case2 : If file is not existing ........ file gets created first


              fobj = open("customers.txt","a")  # appending some data to the file
              case1 : If file is already existing ... it appends the content to the file
              case2 : If file is not existing ........ file gets created first






closing the file
-----------------
fobj.close()





file read operation
----------------------


-  reading line by line
-  fobj.readlines()
-  fobj.read()
-  using csv library
-  using pandas library ( mainly used in data analytics or  file with huge volume of data)










exception handling
-------------------


handling the exceptions in the runtime is known as exception handling.


try
except
finally
else


try:
  #
except:
  #


try:
  ##
except:
  ##
else:
  ##


try:

except:




library | package | module | 
- Every library contains some set of methods.



builtin libraries
------------------
all the builtin libraries which are generally used(math operations , file handling , string operations ,
ftp operations ... )    are available with python by default.




third party libraries
---------------------
Depending on the requirement( database operations , data analytics, remote connections , image processing , machine learning , web ) developer has to install the third party library from 

-www.pypi.org(manually)
- pip tool
- easy_install tool


There are 2 types of installing any library

- pip tool  (  everything is taken care by pip tool ) 

- downloading and installing manually   from pypi.org














function | definition | subroutine | submodule | block
------------------------------------------------


- reusability
- define the block once and call it for multiple times



There are 2 types of functions
-------------------------------

- builtin functions  
- user defined functions



user defined functions
---------------------

fixed arguments
default arguments
keyword arguments
variable length arguments  ( * - tuple ,  ** - dictionary ) 

























re
----
- searching ( re.search)
- matching ( at the beginning of the string)  ( re.match)
- substitute ( replacing)   ( re.sub)
- findall   ( re.findall)
- split     ( re.split)

re is all about metacharacters or wildcard characters


^ : match at the beginning of the string


$ : at the end of the string

* : zero or more occurences of the preceding character

+ : one more more occurence of the preceding character

? : either zero of once occurence of hte preceding character

. : any single character or digit or symbol

[] : character class - any single character or digit or symbol
     if re.search("[pqut]ython",line):     # python or qython or uython or tython
     if re.search("[a-zA-Z0-9]ython",line): 


() : (pattern1|pattern2)
     displays all the lines containing either pattern1 or pattern2


{} : { min,max} occurences of the preceding character
      name = "pyttthon"
      re.search(pyt{1,3}hon",name)
      re.search(pyt{1,}hon",name)
      re.search(pyt{1}hon",name)

whitespaces
\s : space
\d : digit
\w : word




languages

- procedural programming languages ( C ...)
- Object oriented programming ( java cpp ... )


We are going to write out customized classes

class
-----
Class is just like blueprint of the house.
Every class contains data members and member functions


object
---------
object is the instance of the list.


























































































